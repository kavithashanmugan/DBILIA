// SPDX-License-Identifier: GPL-3.0
import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol';
import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol';
import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Counters.sol';
import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721URIStorage.sol';

pragma solidity ^0.8.0;

contract DbiliaToken is ERC721URIStorage,Ownable{
    
    
     using Counters for Counters.Counter;
     Counters.Counter private _tokenIds;
     
    constructor() ERC721("DBILIA","DBL"){
       
      
    }
    
    event Minted(
    address indexed creator,
    uint256 indexed tokenId,
    string indexed tokenURI
  );
    
    struct DbiliaNFT{
        string cardId;
        uint256 edition;
        address tokenOwner;
        
    }
    
    mapping(uint256 => DbiliaNFT) tokenCardEditionMapping;
    mapping(string => uint256 ) tokenUserMapping;
    
    
    function mintWithEther(string memory cardId,uint256 edition,string memory tokenURI) public  returns(uint256 tokenId){
        
        _tokenIds.increment();
         uint256 tokenId = _tokenIds.current();
         
         tokenCardEditionMapping[tokenId].cardId = cardId;
         tokenCardEditionMapping[tokenId].edition = edition;
         tokenCardEditionMapping[tokenId].tokenOwner = msg.sender;
         
        _mint(msg.sender,tokenId);
        _setTokenURI(tokenId,tokenURI);
        
        Minted(msg.sender,tokenId,tokenURI);
        return tokenId;
        
}

    function mintWithUSD(string memory userId,string memory cardId, uint256 edition, string memory tokenURI) internal returns(uint256 tokenId) {
        
    }

    function getMintedToken(uint256 tokenId) public returns(string memory cardId,uint256 edition,address tokenOwner){
        
        cardId = tokenCardEditionMapping[tokenId].cardId;
        edition = tokenCardEditionMapping[tokenId].edition;
        tokenOwner = tokenCardEditionMapping[tokenId].tokenOwner;
        
    }

   // function payWithUSD(uint256 userId){
        
  //  }
    
      
    
    // function mintWithUSD( uint256 userId, bytes32 cardId, uint256 edition, string memory tokenURI) onlyOwner() internal {
       
       
    // }
}